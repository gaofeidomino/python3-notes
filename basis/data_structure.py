#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 数据结构

# 列表（List）：
my_list = [1, 2, 3, 4, 5]
# 列表是一种有序的集合，其中的元素可以是任意类型，并且可以通过索引来访问和修改
# 列表是可变的（Mutable），即列表中的元素可以被增加、删除或修改

# append()  在列表末尾添加一个元素
# insert()  在指定位置插入一个元素
# extend()  将另一个列表的所有元素添加到当前列表的末尾

# pop()     删除并返回列表中指定位置的元素，默认为末尾元素
# remove()  删除列表中指定值的元素，只删除第一个匹配的元素
# del       关键字删除列表中指定位置的元素
del my_list[1]

# ⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝

# 元组（Tuple）：
my_tuple = (1, 2, 3, 4, 5)
# 元组也是一种有序的集合，其中的元素可以是任意类型，并且可以通过索引来访问
# 元组是不可变的（Immutable），即元组中的元素不可被修改
# 定义一个只有 1 个元素的 tuple，必须加一个逗号,，来消除歧义。因为括号()既可以表示 tuple，又可以表示数学公式中的小括号
t = (1,)
t = (1)  # 这种情况下，按小括号进行计算，计算结果自然是 1，不是 tuple

# ⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝

# 字典（Dictionary）：
my_dict = {'name': 'John', 'age': 30}
# 字典是一种无序的键值对集合，其中的元素是由键和值组成的
# 字典中的键是唯一的，而值可以是任意类型
# 字典是可变的，即字典中的键值对可以被增加、删除或修改

'''dict的key必须是不可变对象'''
'''在Python中，字符串、整数等都是不可变的，因此，可以放心地作为 key。而 list 是可变的，就不能作为 key'''

# 要避免 key 不存在的错误，有两种办法，一是通过 in 判断 key 是否存在
'Thomas' in my_dict
# False

# 二是通过 dict 提供的 get() 方法，如果 key 不存在，可以返回 None，或者自己指定的 value
my_dict.get('Thomas')
my_dict.get('Thomas', -1)
# -1

# 删除一个 key，用 pop(key) 方法，对应的 value 也会从 dict 中删除
my_dict.pop('age')

# dict 内部存放的顺序和 key 放入的顺序是没有关系的
'''
和list比较，dict有以下几个特点：
查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。

而list相反：
查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。

所以，dict是用空间来换取时间的一种方法。
'''
# ⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝⏝

# 集合（Set）：
my_set = {1, 2, 3, 4, 5}
# 集合是一种无序的唯一元素集合，其中的元素不会重复
# 集合中的元素可以是任意不可变类型（例如整数、浮点数、字符串、元组等）
# 集合是可变的，即集合中的元素可以被增加或删除

# add(key) 方法可以添加元素到 set 中
my_set.add(4)
# remove(key) 方法可以删除元素
my_set.remove(4)

# set 可以看成数学意义上的无序和无重复元素的集合，因此，两个 set 可以做数学意义上的交集、并集等操作
s1 = set([1, 2, 3])
s2 = set([2, 3, 4])

s1 & s2
# {2, 3}
s1 | s2
# {1, 2, 3, 4}

# set 和 dict 的唯一区别仅在于没有存储对应的 value
# 但是，set 的原理和 dict 一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证 set 内部“不会有重复元素”。


# 再议不可变对象
# str 是不变对象，而 list 是可变对象

# 对于可变对象，比如 list，对 list 进行操作，list 内部的内容是会变化的
a = ['c', 'b', 'a']
a.sort()
a
# ['a', 'b', 'c']

# 对于不可变对象
a = 'abc'
a.replace('a', 'A')
# 'Abc'
a
# 'abc'

# 虽然字符串有个 replace() 方法，也确实变出了 'Abc'，但变量 a 最后仍是 'abc'，如下
a = 'abc'
b = a.replace('a', 'A')
b
# 'Abc'
a
# 'abc'

# 始终牢记，a 是变量，而 'abc' 才是字符串对象！
# replace 方法创建了一个新字符串 'Abc' 并返回


# 对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。
# 相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。


# 使用 key-value 存储结构的 dict 在 Python 中非常有用，选择不可变对象作为 key 很重要，最常用的 key 是字符串。